1 Introdução

Este artigo é uma tentativa de demonstrar para o "mundo real" que a programação funcional é importância vital, e também auxiliar programadores desse tipo de linguagem explorar suas vantagens por completo tornando claros quais são seus benefícios.
Progração funcional é chamada assim porque um programa consiste inteiramente de funções. O programa principal em si é escrito como uma função que recebe o entrada do programa como seu argumento e entrega a saída do programa como o seu resultado. Tipicamente, a função principal é definida em termos de outras funções, que por sua vez, são definidas em termos de outras funções, até os níveis mais baixos as funções são construções primitas da linguagem. Essas funções são como funções matemáticas comuns, e esse artigo será definido por equações comuns. Nossa notação segue a linguagem Miranda (r) de Turner [Tur85], mas deve ser legível sem um conhecimento prévio de linguagens funcionais. (Miranda é uma marca registrada de Research Software Ltd.)

As características especiais e vantagens de linguagens funcionais são comumente sumarizadas como se segue. Programas funcionais não contêm instruções de atribuição, portanto as variáveis, quando atribuidas um valor, nunca mudam. Em geral os programas funcionais não contêm nenhum efeito colateral. Uma chamada de função não pode gerar nenhum efeito senão o cálculo de seu resultado. Isso elimina uma grande fonte de erros, e também torna a ordem de execução irrelevante - uma vez que nenhum efeito colateral pode mudar o valor de uma expressão, ela pode ser avaliado em qualquer momento. Isso alivia o programador do esforço de descrever o fluxo de controle. Posto que expressões podem ser avaliadas a qualquer momento, pode-se substituir livremente variáveis por seus valores ou vice-versa, ou seja, os programas são "referencialmente transparentes". Esta liberdade ajuda a tornar os programas funcionais mais matematicamente acessíveis que em linguagens convencionais.

Tal catálogo de "vantagens" é muito bom, ninguém deve se surpreender se forasteiros não levarem muito a sério. Se fala muito sobre o que programação funcional não tem (não tem atribuição, não tem efeitos colaterais, não tem controle de fluxo), mas não muito sobre o que ela tem. O programador funcional soa um pouco como um monge medieval, negando os prazeres da vida na esperança que isso o faça virtuoso. Para os mais interessados em benefícios materiais, essas "vantagens" não são muito convincentes.

Programadores funcionais argumentam que há grandes benefícios materiais - que um programador funcional é uma ordem de magnitude mais produtivo que sua contraparte convencional, pois os programas funcionais são uma ordem de magnitude mais curtos. Entretanto, por que deveria ser? A única razão levemente plausível que alguém pode sugerir com base nessas "vantagens" é que programas convencionais consistem em 90% de instruções de atribuição e em programas funcionais isso pode ser omitido. Isso é claramente ridículo. Se a omissão de atribuições trouxesse tamanho benefício então programadores FORTRAN estariam fazendo isso por vinte anos. É uma impossibilidade lógica fazer uma linguagem mais poderosa omitindo recursos, não importando quão ruim eles possam ser.

Mesmo um programador funcional deve ficar insatisfeito com essas assim chamadas qualidades, porque elas não vão lhe ajudar a explorar o poder das linguagens funcionais. Não se pode escrever um programa que é essencialmente carente de atribuição, declarações ou particularmente referencialmente transparente. Não há critério de qualidade de programa aqui e, portanto, nenhum ideal para direcionar.

É evidente que esta caracterização de programação funcional é inadequada. Nós devemos encontrar algo para colocar em seu lugar - algo que não só explica a poder da programação funcional, mas também dê uma indicação clara de que o programador funcional deve almejar.


2. Uma analogia com a programação estruturada

É útil fazer uma analogia entre programação funcional e estruturada. No passado as características e vantagens da programação estruturada foram sumarizadas mais ou menos como segue. Programas estruturados não contem declarações goto. Blocos em um programa estruturado não têm entradas e saídas múltiplas. Programas estruturados são mais tratáveis matematicamente que suas contrapartes não estruturadas. Essas "vantagens" da programação são muito similares em espírito com as "vantagens" da programação funcional que discutimos anteriormente. Elas são essencialmente declarações negativas e levaram a muita discussão infrutífera sobre "gotos essenciais" e assim por diante.

Com o benefício da retrospectiva é claro que estas propriedades dos programas estruturados, embora úteis, não vão ao cerne da questão. A diferença mais importante entre programas estruturados e não estruturados é que programas estruturados são concebidos de maneira modular. Um design modular traz consigo grandes ganhos de produtividade. Primeiramente, pequenos módulos podem ser codificados rapidamente e facilmente. Em segundo lugar, módulos de uso geral podem ser reutilizados, levando a um desenvolvimento mais rápido dos próximos programas. Em terceiro lugar, módulos de um programa podem ser testados de maneira independente, ajudando a reduzir o tempo gasto na depuração.

A ausência de gotos, e assim por diate, tem pouco a ver com isso. Apenas auxilia em "programas pequenos", enquanto que um design modular ajuda em "programas grandes". Assim pode-se aproveitar os benefícios da programação estruturada em FORTRAN ou assembly, mesmo como um pouco mais de trabalho.

É comumente aceito que o design modular é a chave para um desenvolvimento de sucesso. Linguagens como Modula-II [Wir82], Ada [oD80] e Standard ML [MTH90] incluem características especialmente designadas para ajudar a aperfeiçoar a modularidade. Entretanto, existe um importante ponto frequentemente esquecido. Quando escreve-se um programa modular para resolver um problema, divide-se o problema em sub-problemas então a resolvem-se os sub-problemas e combinam-se as soluções. As formas de divisão do problema inicial dependem diretamente das maneiras como podem-se colar as soluções. Então, para aumentar a capacidade de, conceitualmente, modulalizar um problema, deve-se prover novos tipos de cola em uma linguagem de programação. Complicadas regras de escopo e provisão para compilação separada ajuda somente com detalhes formais, elas não oferencem  novas ferramentas conceituais para decompor problemas.

Pode-se admirar a importancia da cola através de uma analogia com a carpintaria. Uma cadeira pode ser fabricada facilmente com a construção das partes: assento, pernas, encosto, etc, e fixando-os juntos da maneira certa. Mas isso depende de uma habilidade de construir juntas e cola de madeira. Na falta dessa habilidade, a única maneira de fabricar uma cadeira é esculpindo-a em um pedaço a partir de um bloco de madeira, uma tarefa muito mais difícil. Esse exemplo demonstra o grande poder da modularização e a importância de se ter a cola certa.

Agora vamos retornar a programação funcional. Vamos discutir no restante deste artigo que linguagens funcionais fornecem dois novos e importantes tipos de cola. Vamos dar muitos exemplos de programas que podem ser modularizados de novas formas e amplamente simplificados. Essa é a chave do poder da programação funcional: ela proporciona uma modularização aperfeiçoada. Também é o objetivo para o qual os programadores devem focar - modulos menores e mais simples, colados em conjunto com as novas colas que vamos descrever.

3. Colando funções em conjunto

A primeira de dois novos tipos de cola possibilita que funções simples sejam combinadas para a criação de funções mais complexas. Isso pode ser ilustrado com um problema simples de processamento de listas: adicionar elementos à lista. Definimos listas como

listof X ::= nil | cons X (listof X)

que quer dizer que uma lista de X (qualquer que seja X) é ou nula, representando uma lista sem elementos, ou é uma função cons de um X mais outra lista de X. Uma função cons representa uma lista onde o primeiro elemento é X e o segundo, bem como os subsequentes, são elementos em outra lista de X. Aqui, X pode ser substituido por qualquer tipo. Por exemplo, se X é inteiro então a definição diz que uma lista de inteiros é uma lista vazia ou uma cons de um inteiro e outra lista de inteiros. Seguindo a prática comum, nós vamos escrever listas simplesmente envolvendo seus elementos em colchetes, ao invés de escrever cons e nulos explicitamente. É simplesmente um atalho para a conveniência da notação. Por exemplo:

[] 		means 	nil
[1] 	means 	cons 1 nil
[1,2,3] means 	cons 1 (cons 2 (cons 3 nil))

Os elemtnos de uma lista podem ser adicionados por uma função recursiva sum. Sum deve ser definida para dois tipos de argumento: uma lista vazia (nula), e um cons. Sendo que a soma de nenhum número é zero, definimos

sum nil = 0

e sendo que a soma de uma cons pode ser calculada pela adição do primeiro elemento da lista com a soma dos demais, definimos

sum (cons num list) = num + sum list

Examinando essa definição, vemos que somente as partes isoladas abaixo são específicas para o cálculo da soma

          +---+
sum nil = | 0 |
          +---+

                          +---+
sum (cons num list) = num | + | sum list
                          +---+

Isso significa que a computação de uma soma pode ser modularizada juntando-se um padrão recursivo e partes isoladas. Esse padrão recursivo é normalmente chamado de reduce então a função sum pode ser descrita como

sum = reduce add 0

onde, por conveniência, reduce é recebe uma função com dois argumentos add ao invés de um operador. Add é simplesmente definida por

add x y = x + y

A definição de reduce pode ser derivada pela parametrização de sum, gerando

(reduce f x) nil = x
(reduce f x) (cons a l) = f a((reduce fx) l)

Aqui escrevemos parênteses isolando (reduce f x) para deixar claro que ela substitui sum. Normalmente os parênteses são omitidos, então ((reduce f x) l) é escrito como (reduce f x l). Uma funçãi de 3 argumentos como reduce, aplicada a somente 2 é tida como sendo uma função de um argumento remanescente e, em geral, uma função de n argumentos aplicada a somente m (< n) é tida como sendo uma função de n - m argumentos remanescentes. Seguiremos essa convenção no futuro.
Tendo modularisado sum desta maneira, podemos colher benefícios reutilizando as partes. A parte mais interessante é reduce, que pode ser utilizada para escrever uma função para multiplicar os elementos de uma lista sem exigir mais código:

product = reduce multiply 1

Também pode ser usada para testar algum elemento de uma lista de booleanos é true

anytrue = reduce or false

ou se são todos true

alltrue = reduce and true

Uma maneira para entender (reduce f a) é como uma função que substitui todas a ocorrencias de cons em uma lista por f, e todas as ocorrências de nil por a. Pegando a lista [1,2,3] como exemplo, uma vez que isso significa

cons 1 (cons 2 (cons 3 nil))

então (reduce add 0) a converte em

add 1 (add 2 (add 3 0)) = 6

e (reduce multiply 1) a converte em

multiply 1 (multiply 2 (multiply 3 1)) = 6

Agora é óbvio que (reduce cons nil) apenas copia uma lista. Uma vez que uma lisat pode ser anexada em outro aplicando cons na frente, nós temos

append a b = reduce cons b a

Como um exemplo

append [1,2] [3,4] = reduce cons [3,4] [1,2]
					= (reduce cons [3,4]) (cons 1 (cons 2 nil))
					= cons 1 (cons 2 [3,4]))
						(replacing cons by cons and nil by [3,4])
					= [1,2,3,4]

Uma função para dobrar todos elementos da lista pode ser escrita como

	doubleall = reduce doubleandcons nil
		where doubleandcons num list = cons (2*num) list

Doubleandcons pode ser modularizada ainda mais, primeiro em
	
	doubleandcons = fandcons double
	where double n = 2*n
	fandcons f el list = cons (f el) list

e então como 

	fandcons f = cons . f

onde "." (compisição de funções, um operador padrão) é definido por

	(f . g) h = f (g h)

Nós podemos ver que a nova definição de fandcons é correta aplicando alguns argumentos:

	fandcons f el = (cons . f) el
	= cons (f el)
	so fandcons f el list = cons (f el) list

A versão final é

	doubleall = reduce (cons . double) nil

Com mais uma modularização nós chegamos a

	doubleall = map double
	map f = reduce (cons . f) nil


onde map aplica uma função f qualquer a todos os elementos da lista. Map é outra função geralmente útil.
Nós podemos ainda escrever uma função para somar todos os elementos de uma matriz, representada por uma lista de listas. Isto é

	summatrix = sum . map sum

A função map sum usa sum para somar todas as linhas e então a função sum mais a esquerda soma todos os totais das linha para obter a soma de toda a matriz.
Esses exemplos devem ser suficientes para convencer o leitor que uma pequena modularização pode ir longe. Modularizando uma simples função (sum) como a combinação de uma "função de maior ordem" e alguns argumentos simples nós chegamos na em uma porção (reduce) que pode ser usada para escrever muitas outras funções aplicáveis a listas sem a necessidade de esforço em programação. Nós não precisamos parar em funções aplicáveis em listas. Como um outro exemplo considere uma estrutura de dados de árvore rotulada ordenada, definida por:

treeof X ::= node X (listof (treeof X))

Essa definição diz que uma árvore (tree) de Xs é um nó com um rótulo que é um X e uma lista de sub-árvores que podem também sem árvores de Xs. Por exemplo, a árvore

	    1 o
	     / \
	    /   \
	   /     \
	2 o       o 3
	          |
	          |
	          |
	          o 4

seria representada por

	node 1
		(cons (node 2 nil)
			(cons (node 3
						(cons (node 4 nil) nil))
					nil))

Ao invés de considerar um exemplo e abstrair uma função de ordem superior dele, nós iremos diretamento para função redtree análoga a reduce. Lembre-se que reduce pega dois argumentos, alguma coisa para substuir cons, e alguma coisa para substuir nil. Uma vez que árvores são construídas usando node, cons e nil, redtree deve receber três argumentos - alguma coisa para substituir cada um desses. Dado que árvores e listas são de tipos diferentes, nós teremos que definir duas funções, cada uma para operar em cada tipo. Logo, nós definimos

	redtree f g a (node label subtrees) =
			f label (redtree’ f g a subtrees)
	redtree’ f g a (cons subtree rest) =
			g (redtree f g a subtree) (redtree’ f g a rest)
	redtree’ f g a nil = a

Muitas funções interessantes podem ser definidas pela união de redtree junto a outras. Por exemplo, todos os rótulos em uma árvore de números podem ser somados usando

	sumtree = redtree add add 0

Tomando a árvore que escrevemos anteriormente como exemplo, sumtree gera

	add 1
		(add (add 2 0)
			(add (add 3
				(add (add 4 0) 0))
			0))
	= 10

Uma lista como todos os rótulos em uma árvore pode ser computada usando

	labels = redtree cons append nil

O mesmo exemplo origina

	cons 1
		(append (cons 2 nil)
			(append (cons 3
						(append (cons 4 nil) nil))
					nil))
	= [1,2,3,4]

Finalmente pode-se definir uma função análoga à map que aplica uma função f para todos os elementos em uma árvore:

	maptree f = redtree (node . f) cons nil


Tudo isso pode ser conquistado porque linguagens funcionais proporcionam funções que são indivisíveis em linguagens de programação convencionais sejam expressas como uma combinação de partes - uma função de ordem superior algumas funções especializadas. Uma vez definida, essa função de ordem superior permite que várias operações sejam programadas facilmente. Sempre que uma nova estrutura de dados é definida uma função de ordem superior deve ser escrita para processá-la. Isso deixa a manipulação de datatype fácil, e também concentra o conhecimento sobre os detalhes de sua representação. A melhor analogia com programação convencional é com linguagens extensíveis - é como se a linguagem de programação pudesse ser estendida com novas estruturas de controle sempre que desejar.

4. Colando programas juntos

O novo tipo de cola que linguagens funcionais proporcionam possibilita que programas inteiros possam ser unidos. Lembre-se que um programa funcional completo é somente uma função da sua entrada até a sua saída. Se f e g são esses programas, então (g . f) é um programa que, quando aplicado às suas entradas, computa

	g (f input)