1 Introdução

Este artigo é uma tentativa de demonstrar para o "mundo real" que a programação funcional é importância vital, e também auxiliar programadores desse tipo de linguagem explorar suas vantagens por completo tornando claros quais são seus benefícios.
Progração funcional é chamada assim porque um programa consiste inteiramente de funções. O programa principal em si é escrito como uma função que recebe o entrada do programa como seu argumento e entrega a saída do programa como o seu resultado. Tipicamente, a função principal é definida em termos de outras funções, que por sua vez, são definidas em termos de outras funções, até os níveis mais baixos as funções são construções primitas da linguagem. Essas funções são como funções matemáticas comuns, e esse artigo será definido por equações comuns. Nossa notação segue a linguagem Miranda (r) de Turner [Tur85], mas deve ser legível sem um conhecimento prévio de linguagens funcionais. (Miranda é uma marca registrada de Research Software Ltd.)

As características especiais e vantagens de linguagens funcionais são comumente sumarizadas como se segue. Programas funcionais não contêm instruções de atribuição, portanto as variáveis, quando atribuidas um valor, nunca mudam. Em geral os programas funcionais não contêm nenhum efeito colateral. Uma chamada de função não pode gerar nenhum efeito senão o cálculo de seu resultado. Isso elimina uma grande fonte de erros, e também torna a ordem de execução irrelevante - uma vez que nenhum efeito colateral pode mudar o valor de uma expressão, ela pode ser avaliado em qualquer momento. Isso alivia o programador do esforço de descrever o fluxo de controle. Posto que expressões podem ser avaliadas a qualquer momento, pode-se substituir livremente variáveis por seus valores ou vice-versa, ou seja, os programas são "referencialmente transparentes". Esta liberdade ajuda a tornar os programas funcionais mais matematicamente acessíveis que em linguagens convencionais.

Tal catálogo de "vantagens" é muito bom, ninguém deve se surpreender se forasteiros não levarem muito a sério. Se fala muito sobre o que programação funcional não tem (não tem atribuição, não tem efeitos colaterais, não tem controle de fluxo), mas não muito sobre o que ela tem. O programador funcional soa um pouco como um monge medieval, negando os prazeres da vida na esperança que isso o faça virtuoso. Para os mais interessados em benefícios materiais, essas "vantagens" não são muito convincentes.

Programadores funcionais argumentam que há grandes benefícios materiais - que um programador funcional é uma ordem de magnitude mais produtivo que sua contraparte convencional, pois os programas funcionais são uma ordem de magnitude mais curtos. Entretanto, por que deveria ser? A única razão levemente plausível que alguém pode sugerir com base nessas "vantagens" é que programas convencionais consistem em 90% de instruções de atribuição e em programas funcionais isso pode ser omitido. Isso é claramente ridículo. Se a omissão de atribuições trouxesse tamanho benefício então programadores FORTRAN estariam fazendo isso por vinte anos. É uma impossibilidade lógica fazer uma linguagem mais poderosa omitindo recursos, não importando quão ruim eles possam ser.

Mesmo um programador funcional deve ficar insatisfeito com essas assim chamadas qualidades, porque elas não vão lhe ajudar a explorar o poder das linguagens funcionais. Não se pode escrever um programa que é essencialmente carente de atribuição, declarações ou particularmente referencialmente transparente. Não há critério de qualidade de programa aqui e, portanto, nenhum ideal para direcionar.

É evidente que esta caracterização de programação funcional é inadequadta. Nós devemos encontrar algo para colocar em seu lugar - algo que não só explica a poder da programação funcional, mas também dê uma indicação clara de que o programador funcional deve almejar.


